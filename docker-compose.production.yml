version: "3.7"
services:

## --------------------------- IMPA AI PRODUCTION --------------------------- ##

  postgres:
    image: postgres:15
    
    volumes:
      - impa_postgres_data:/var/lib/postgresql/data
      - ./database/complete-setup.sql:/docker-entrypoint-initdb.d/01-setup.sql:ro

    networks:
      - ImpaServer

    environment:
      ## Configuração do PostgreSQL
      - POSTGRES_DB=impa_ai
      - POSTGRES_USER=impa_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "2"
          memory: 2048M

## --------------------------- IMPA AI PRODUCTION --------------------------- ##

  impa-ai:
    image: impa-ai:latest
    
    networks:
      - ImpaServer

    environment:
      ## Configuração do Banco de Dados
      - DATABASE_URL=postgresql://impa_user:${POSTGRES_PASSWORD}@postgres:5432/impa_ai
      - POSTGRES_URL=postgresql://impa_user:${POSTGRES_PASSWORD}@postgres:5432/impa_ai
      - POSTGRES_PRISMA_URL=postgresql://impa_user:${POSTGRES_PASSWORD}@postgres:5432/impa_ai?pgbouncer=true&connect_timeout=15
      - POSTGRES_URL_NON_POOLING=postgresql://impa_user:${POSTGRES_PASSWORD}@postgres:5432/impa_ai
      - POSTGRES_USER=impa_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=impa_ai
      - POSTGRES_HOST=postgres

      ## Configuração do Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}

      ## Configuração da Aplicação
      - NODE_ENV=production
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}

      ## Configuração das Integrações
      - EVOLUTION_API_URL=${EVOLUTION_API_URL}
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
      - N8N_URL=${N8N_URL}
      - N8N_API_KEY=${N8N_API_KEY}

      ## Configuração OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      ## Configuração de TTS
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - FISH_AUDIO_API_KEY=${FISH_AUDIO_API_KEY}

      ## Configuração Cal.com
      - CALCOM_API_KEY=${CALCOM_API_KEY}

    depends_on:
      - postgres

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "2"
          memory: 2048M
      labels:
        - traefik.enable=true
        - traefik.http.routers.impa-ai.rule=Host(`${DOMAIN}`)
        - traefik.http.services.impa-ai.loadbalancer.server.port=3000
        - traefik.http.routers.impa-ai.service=impa-ai
        - traefik.http.routers.impa-ai.entrypoints=websecure
        - traefik.http.routers.impa-ai.tls.certresolver=letsencryptresolver
        - traefik.http.routers.impa-ai.tls=true

## --------------------------- IMPA AI PRODUCTION --------------------------- ##

volumes:
  impa_postgres_data:
    external: true
    name: impa_postgres_data

networks:
  ImpaServer:
    external: true
    name: ImpaServer
