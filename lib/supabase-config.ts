/**
 * Configura√ß√£o do Supabase
 * Prioriza vari√°veis de ambiente de runtime.
 * Alerta se estiver usando placeholders do build.
 */

const PLACEHOLDER_URL = "http://placeholder-build.supabase.co"
const PLACEHOLDER_KEY = "placeholder-build-anon-key"

function getSupabaseEnvVar(envVarName: string, buildTimePlaceholder: string): string {
  const runtimeValue = process.env[envVarName]

  if (typeof window === "undefined") {
    // L√≥gica do lado do servidor / build / startup
    if (runtimeValue && runtimeValue !== buildTimePlaceholder) {
      console.log(
        `[ENV_CONFIG] ‚úÖ Usando ${envVarName} de runtime: ${envVarName.includes("KEY") ? "***OCULTO***" : runtimeValue}`,
      )
      return runtimeValue
    } else if (runtimeValue === buildTimePlaceholder) {
      // Isso pode acontecer se o Portainer n√£o injetar a vari√°vel, e o valor do build "vazar" para o runtime.
      console.warn(
        `[ENV_CONFIG] ‚ö†Ô∏è ATEN√á√ÉO: ${envVarName} est√° usando o valor placeholder do BUILD ('${buildTimePlaceholder}').`,
      )
      console.warn(`   Verifique se a vari√°vel est√° corretamente definida no seu ambiente de runtime (Portainer).`)
      // Em produ√ß√£o, voc√™ pode querer falhar aqui se a vari√°vel real n√£o for fornecida.
      if (process.env.NODE_ENV === "production") {
        throw new Error(
          `ERRO CR√çTICO: ${envVarName} n√£o foi fornecida pelo ambiente de runtime e est√° usando placeholder do build.`,
        )
      }
      return runtimeValue // Retorna o placeholder do build, mas com aviso.
    } else {
      // Vari√°vel n√£o definida nem em runtime nem como placeholder (n√£o deveria acontecer com o Dockerfile atual)
      console.error(`[ENV_CONFIG] üö® ERRO: ${envVarName} n√£o est√° definida!`)
      if (process.env.NODE_ENV === "production") {
        throw new Error(`ERRO CR√çTICO: ${envVarName} n√£o definida no ambiente.`)
      }
      return "" // Fallback de emerg√™ncia, mas o erro j√° foi logado.
    }
  } else {
    // L√≥gica do lado do cliente
    // No cliente, process.env.NEXT_PUBLIC_* j√° ter√° o valor embutido pelo Next.js durante o build.
    // Se o valor embutido for o placeholder, isso significa que as vari√°veis de runtime n√£o foram passadas corretamente
    // para o cliente (o que √© um cen√°rio mais complexo de resolver sem recarregar a p√°gina ou usar APIs).
    // A estrat√©gia principal √© garantir que o SERVIDOR tenha as vari√°veis corretas.
    if (runtimeValue === buildTimePlaceholder) {
      console.warn(
        `[CLIENT_ENV_CONFIG] ‚ö†Ô∏è Cliente est√° vendo placeholder do build para ${envVarName}. Isso pode indicar problemas na passagem de vari√°veis de runtime para o cliente.`,
      )
    }
    return runtimeValue || "" // Retorna o que foi embutido no build.
  }
}

export const supabaseConfig = {
  get url(): string {
    return getSupabaseEnvVar("NEXT_PUBLIC_SUPABASE_URL", PLACEHOLDER_URL)
  },
  get anonKey(): string {
    return getSupabaseEnvVar("NEXT_PUBLIC_SUPABASE_ANON_KEY", PLACEHOLDER_KEY)
  },
  get serviceRoleKey(): string {
    // SUPABASE_SERVICE_ROLE_KEY n√£o √© prefixado com NEXT_PUBLIC_, ent√£o √© apenas de servidor
    // e n√£o precisa de placeholder de build.
    const key = process.env.SUPABASE_SERVICE_ROLE_KEY
    if (!key && typeof window === "undefined" && process.env.NODE_ENV === "production") {
      // Opcional: pode ser necess√°rio apenas para algumas opera√ß√µes de admin.
      // console.warn("[ENV_CONFIG] SUPABASE_SERVICE_ROLE_KEY n√£o definida.")
    }
    return key || ""
  },
  schema: "impaai",
}

// O restante do arquivo (TABLES, restApiUrls, getDefaultHeaders, valida√ß√µes) permanece o mesmo,
// pois eles depender√£o dos getters de supabaseConfig.url e supabaseConfig.anonKey.

// ... (TABLES, restApiUrls, getDefaultHeaders, validateSupabaseConnection, validateSupabaseTables, TableName, TableValue)
// Copie o restante do arquivo da resposta anterior, pois n√£o precisa de altera√ß√£o.

// Tabelas do banco de dados
export const TABLES = {
  USER_PROFILES: "user_profiles",
  AGENTS: "agents",
  WHATSAPP_CONNECTIONS: "whatsapp_connections",
  ACTIVITY_LOGS: "activity_logs",
  USER_SETTINGS: "user_settings",
  SYSTEM_SETTINGS: "system_settings",
  THEMES: "themes",
  INTEGRATIONS: "integrations",
  USER_API_KEYS: "user_api_keys",
  AGENT_LOGS: "agent_logs",
  AGENT_STATS: "agent_stats",
  WHATSAPP_INSTANCES: "whatsapp_instances",
  WHATSAPP_MESSAGES: "whatsapp_messages",
  USER_SESSIONS: "user_sessions",
  SYSTEM_LOGS: "system_logs",
} as const

// URLs da API REST do Supabase
export const restApiUrls = {
  get base() {
    if (!supabaseConfig.url) throw new Error("Supabase URL n√£o configurada para restApiUrls.base")
    return `${supabaseConfig.url}/rest/v1`
  },
  get users() {
    if (!supabaseConfig.url) throw new Error("Supabase URL n√£o configurada para restApiUrls.users")
    return `${supabaseConfig.url}/rest/v1/${TABLES.USER_PROFILES}`
  },
  // ... adicione verifica√ß√µes para todas as URLs se desejar ser extra seguro
  get agents() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.AGENTS}`
  },
  get whatsappConnections() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.WHATSAPP_CONNECTIONS}`
  },
  get activityLogs() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.ACTIVITY_LOGS}`
  },
  get userSettings() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.USER_SETTINGS}`
  },
  get systemSettings() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.SYSTEM_SETTINGS}`
  },
  get themes() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.THEMES}`
  },
  get integrations() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.INTEGRATIONS}`
  },
  get apiKeys() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.USER_API_KEYS}`
  },
}

// Headers padr√£o para requisi√ß√µes
export const getDefaultHeaders = () => {
  if (!supabaseConfig.url || !supabaseConfig.anonKey) {
    throw new Error("Supabase URL ou Anon Key n√£o configurados ao tentar gerar headers.")
  }
  return {
    Accept: "application/json",
    "Content-Type": "application/json",
    "Accept-Profile": supabaseConfig.schema,
    "Content-Profile": supabaseConfig.schema,
    apikey: supabaseConfig.anonKey,
  }
}

// Fun√ß√£o para validar conex√£o com Supabase
export async function validateSupabaseConnection() {
  console.log("üîç Validando conex√£o com Supabase...")
  const url = supabaseConfig.url // Usa o getter
  const anonKey = supabaseConfig.anonKey // Usa o getter

  if (!url || url === PLACEHOLDER_URL || !anonKey || anonKey === PLACEHOLDER_KEY) {
    const errorMsg = `‚ùå Configura√ß√µes do Supabase inv√°lidas ou placeholders. URL: '${url}', Key: '${anonKey ? "definida" : "N√ÉO DEFINIDA"}'. Imposs√≠vel validar conex√£o.`
    console.error(errorMsg)
    throw new Error(errorMsg)
  }

  try {
    const response = await fetch(`${url}/rest/v1/`, {
      headers: {
        apikey: anonKey,
        Authorization: `Bearer ${anonKey}`,
        "Accept-Profile": supabaseConfig.schema,
        "Content-Profile": supabaseConfig.schema,
      },
    })

    if (!response.ok) {
      throw new Error(`Erro na conex√£o: ${response.status} ${response.statusText}. URL: ${url}`)
    }

    console.log("‚úÖ Conex√£o com Supabase estabelecida com sucesso!")
    return true
  } catch (error) {
    console.error("‚ùå Erro na conex√£o com Supabase:", error)
    throw error
  }
}

export async function validateSupabaseTables() {
  console.log("üîç Validando tabelas do banco...")
  const url = supabaseConfig.url
  const anonKey = supabaseConfig.anonKey

  if (!url || url === PLACEHOLDER_URL || !anonKey || anonKey === PLACEHOLDER_KEY) {
    const errorMsg = `‚ùå Configura√ß√µes do Supabase inv√°lidas ou placeholders para validar tabelas. URL: '${url}'`
    console.error(errorMsg)
    throw new Error(errorMsg)
  }

  const tablesToCheck = [TABLES.USER_PROFILES, TABLES.AGENTS, TABLES.SYSTEM_SETTINGS]
  const results = []

  for (const table of tablesToCheck) {
    try {
      const response = await fetch(`${restApiUrls.base}/${table}?limit=1`, {
        headers: getDefaultHeaders(),
      })

      if (response.ok) {
        console.log(`‚úÖ Tabela ${table}: OK`)
        results.push({ table, status: "ok" })
      } else {
        console.log(`‚ùå Tabela ${table}: Erro ${response.status}`)
        results.push({ table, status: "error", error: response.status })
      }
    } catch (error) {
      console.log(`‚ùå Tabela ${table}: Erro de conex√£o`, error.message)
      results.push({ table, status: "error", error: error.message })
    }
  }

  const successCount = results.filter((r) => r.status === "ok").length
  console.log(`üìä Tabelas validadas: ${successCount}/${tablesToCheck.length}`)

  if (successCount === 0 && tablesToCheck.length > 0) {
    throw new Error("Nenhuma tabela principal foi encontrada ou est√° acess√≠vel.")
  }
  return results
}

export type TableName = keyof typeof TABLES
export type TableValue = (typeof TABLES)[TableName]
