/**
 * Configura√ß√£o do Supabase.
 * Em runtime (servidor e cliente via /api/config), usa as vari√°veis injetadas pelo Portainer.
 * Durante o build, usa os placeholders definidos no Dockerfile.
 */

const PLACEHOLDER_URL = "http://placeholder-build.supabase.co"
const PLACEHOLDER_KEY = "placeholder-build-anon-key"

// Fun√ß√£o para obter vari√°veis de ambiente, usada principalmente pelo servidor
// ou pelo cliente quando os valores s√£o embutidos (o que n√£o √© o caso aqui para runtime)
function getSupabaseEnvVar(envVarName: string, buildTimePlaceholder: string, isSecret = false): string {
  const runtimeValue = process.env[envVarName]

  if (typeof window === "undefined") {
    // L√≥gica do lado do servidor / build
    if (runtimeValue && runtimeValue !== buildTimePlaceholder) {
      // Valor de runtime real (do Portainer)
      console.log(`[ENV_CONFIG_SERVER] ‚úÖ Usando ${envVarName} de runtime: ${isSecret ? "***OCULTO***" : runtimeValue}`)
      return runtimeValue
    } else if (runtimeValue === buildTimePlaceholder) {
      // Valor do placeholder do build detectado em runtime
      // console.warn( // Log j√° acontece no start.js e na valida√ß√£o de conex√£o
      //   `[ENV_CONFIG_SERVER] ‚ö†Ô∏è ATEN√á√ÉO: ${envVarName} est√° usando o valor placeholder do BUILD ('${buildTimePlaceholder}') em runtime.`,
      // )
      // Em produ√ß√£o, o start.js j√° deve ter falhado se isso acontecer.
      // Se chegou aqui em produ√ß√£o com placeholder, √© um problema s√©rio na valida√ß√£o do start.js.
      if (process.env.NODE_ENV === "production") {
        // Esta verifica√ß√£o √© uma segunda camada de seguran√ßa.
        // O script start.js deve ser a primeira barreira.
        throw new Error(
          `ERRO CR√çTICO (supabase-config): ${envVarName} est√° usando placeholder do build em ambiente de produ√ß√£o. Verifique a inje√ß√£o de vari√°veis do Portainer e o script start.js.`,
        )
      }
      return runtimeValue // Permite placeholder em dev/build
    } else {
      // Vari√°vel n√£o definida
      // console.error(`[ENV_CONFIG_SERVER] üö® ERRO: ${envVarName} n√£o est√° definida!`)
      // Durante o build, o Next.js pode tentar acessar isso. Se n√£o estiver definido (e n√£o for placeholder), pode causar erro no build.
      // O Dockerfile agora SEMPRE define os placeholders para o build, ent√£o este caso (undefined) n√£o deveria ocorrer no build.
      // Se ocorrer em runtime, o start.js j√° deveria ter falhado.
      if (process.env.NODE_ENV === "production" && !runtimeValue) {
        throw new Error(`ERRO CR√çTICO (supabase-config): ${envVarName} n√£o definida no ambiente de produ√ß√£o.`)
      }
      // Para o build, se por algum motivo o placeholder n√£o foi pego, retornar o placeholder explicitamente
      // para evitar que o build quebre se o c√≥digo tentar usar um 'undefined'.
      // No entanto, o Dockerfile deve garantir que process.env[envVarName] seja o placeholder no build.
      return buildTimePlaceholder
    }
  } else {
    // L√≥gica do lado do cliente
    // O cliente DEVE obter a configura√ß√£o via RuntimeConfigProvider -> /api/config.
    // Se este c√≥digo for chamado no cliente, √© um erro de design, pois process.env
    // aqui conteria os valores embutidos no build (placeholders).
    console.warn(
      `[ENV_CONFIG_CLIENT] ‚ö†Ô∏è Tentativa de ler ${envVarName} diretamente no cliente via supabase-config. O cliente deve usar useRuntimeConfig().`,
    )
    // Retorna o valor que foi embutido no build (placeholder) para evitar quebrar, mas isso n√£o √© o ideal.
    return runtimeValue || buildTimePlaceholder
  }
}

export const supabaseConfig = {
  // Estes getters s√£o usados pelo SERVIDOR e durante o BUILD.
  // O cliente usar√° RuntimeConfigProvider.
  get url(): string {
    // Simplificado: usa apenas NEXT_PUBLIC_SUPABASE_URL ou o placeholder.
    return getSupabaseEnvVar("NEXT_PUBLIC_SUPABASE_URL", PLACEHOLDER_URL)
  },
  get anonKey(): string {
    // Simplificado: usa apenas NEXT_PUBLIC_SUPABASE_ANON_KEY ou o placeholder.
    return getSupabaseEnvVar("NEXT_PUBLIC_SUPABASE_ANON_KEY", PLACEHOLDER_KEY, true)
  },
  get serviceRoleKey(): string {
    // Esta vari√°vel √© apenas para o servidor e n√£o tem placeholder de build.
    const key = process.env.SUPABASE_SERVICE_ROLE_KEY
    if (!key && typeof window === "undefined" && process.env.NODE_ENV === "production") {
      // console.warn("[ENV_CONFIG_SERVER] SUPABASE_SERVICE_ROLE_KEY n√£o definida (opcional).")
    }
    return key || ""
  },
  schema: "impaai",
}

// Tabelas do banco de dados (sem altera√ß√£o)
export const TABLES = {
  USER_PROFILES: "user_profiles",
  AGENTS: "agents",
  WHATSAPP_CONNECTIONS: "whatsapp_connections",
  ACTIVITY_LOGS: "activity_logs",
  USER_SETTINGS: "user_settings",
  SYSTEM_SETTINGS: "system_settings",
  THEMES: "themes",
  INTEGRATIONS: "integrations",
  USER_API_KEYS: "user_api_keys",
  AGENT_LOGS: "agent_logs",
  AGENT_STATS: "agent_stats",
  WHATSAPP_INSTANCES: "whatsapp_instances",
  WHATSAPP_MESSAGES: "whatsapp_messages",
  USER_SESSIONS: "user_sessions",
  SYSTEM_LOGS: "system_logs",
} as const

// URLs da API REST do Supabase (sem altera√ß√£o, usam supabaseConfig.url)
export const restApiUrls = {
  get base() {
    if (!supabaseConfig.url) throw new Error("Supabase URL (servidor) n√£o configurada para restApiUrls.base")
    return `${supabaseConfig.url}/rest/v1`
  },
  get users() {
    if (!supabaseConfig.url) throw new Error("Supabase URL (servidor) n√£o configurada para restApiUrls.users")
    return `${supabaseConfig.url}/rest/v1/${TABLES.USER_PROFILES}`
  },
  get agents() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.AGENTS}`
  },
  get whatsappConnections() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.WHATSAPP_CONNECTIONS}`
  },
  get activityLogs() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.ACTIVITY_LOGS}`
  },
  get userSettings() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.USER_SETTINGS}`
  },
  get systemSettings() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.SYSTEM_SETTINGS}`
  },
  get themes() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.THEMES}`
  },
  get integrations() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.INTEGRATIONS}`
  },
  get apiKeys() {
    return `${supabaseConfig.url}/rest/v1/${TABLES.USER_API_KEYS}`
  },
}

// Headers padr√£o para requisi√ß√µes (sem altera√ß√£o, usam supabaseConfig.anonKey)
export const getDefaultHeaders = () => {
  if (!supabaseConfig.url || !supabaseConfig.anonKey) {
    throw new Error("Supabase URL ou Anon Key (servidor) n√£o configurados ao tentar gerar headers.")
  }
  return {
    Accept: "application/json",
    "Content-Type": "application/json",
    "Accept-Profile": supabaseConfig.schema,
    "Content-Profile": supabaseConfig.schema,
    apikey: supabaseConfig.anonKey,
  }
}

// Fun√ß√£o para validar conex√£o com Supabase (sem altera√ß√£o na l√≥gica principal)
export async function validateSupabaseConnection() {
  console.log("üîç Validando conex√£o com Supabase (usando supabaseConfig)...")
  const url = supabaseConfig.url // Usa o getter simplificado
  const anonKey = supabaseConfig.anonKey // Usa o getter simplificado

  // A l√≥gica de getSupabaseEnvVar j√° trata placeholders e produ√ß√£o.
  // Se url ou anonKey forem placeholders em produ√ß√£o, um erro j√° teria sido lan√ßado.
  // Se n√£o estiverem definidos (o que n√£o deveria acontecer devido ao Dockerfile e start.js),
  // getSupabaseEnvVar retornaria o placeholder ou lan√ßaria erro.

  if (!url || url === PLACEHOLDER_URL || !anonKey || anonKey === PLACEHOLDER_KEY) {
    // Esta verifica√ß√£o adicional √© para o caso de algo ter passado pelas checagens anteriores
    // ou se estivermos em um ambiente de desenvolvimento onde placeholders s√£o permitidos.
    const errorMsg = `‚ùå Configura√ß√µes do Supabase inv√°lidas ou placeholders detectados em validateSupabaseConnection. URL: '${url}', Key: '${anonKey ? "definida" : "N√ÉO DEFINIDA"}'.`
    console.error(errorMsg)
    // Em produ√ß√£o, o start.js ou getSupabaseEnvVar j√° deveriam ter impedido isso.
    // Mas se chegou aqui, √© melhor falhar.
    if (process.env.NODE_ENV === "production" && (url === PLACEHOLDER_URL || anonKey === PLACEHOLDER_KEY)) {
      throw new Error(errorMsg + " Placeholders n√£o s√£o permitidos em produ√ß√£o aqui.")
    }
    // Se n√£o for produ√ß√£o, ou se as vars n√£o estiverem definidas (o que √© um erro de config), n√£o prosseguir.
    if (!url || !anonKey) throw new Error(errorMsg + " URL ou Chave Anon n√£o definidas.")
    // Se for dev e forem placeholders, podemos optar por n√£o validar ou validar sabendo que s√£o placeholders.
    // Por agora, vamos lan√ßar erro se forem placeholders para sermos estritos.
    if (url === PLACEHOLDER_URL || anonKey === PLACEHOLDER_KEY) {
      console.warn("Tentando validar conex√£o com placeholders. Isso n√£o funcionar√° com um Supabase real.")
      // throw new Error(errorMsg + " N√£o √© poss√≠vel validar conex√£o real com placeholders.");
      // Ou podemos permitir que a tentativa de fetch falhe naturalmente.
    }
  }

  try {
    const response = await fetch(`${url}/rest/v1/`, {
      headers: {
        apikey: anonKey,
        Authorization: `Bearer ${anonKey}`,
        "Accept-Profile": supabaseConfig.schema,
        "Content-Profile": supabaseConfig.schema,
      },
    })

    if (!response.ok) {
      throw new Error(`Erro na conex√£o: ${response.status} ${response.statusText}. URL: ${url}`)
    }

    console.log("‚úÖ Conex√£o com Supabase estabelecida com sucesso!")
    return true
  } catch (error) {
    console.error("‚ùå Erro na conex√£o com Supabase:", error)
    // Se o erro for por causa de placeholders, o log acima j√° indicou.
    throw error
  }
}

// validateSupabaseTables (sem altera√ß√£o na l√≥gica principal, usar√° supabaseConfig atualizado)
export async function validateSupabaseTables() {
  console.log("üîç Validando tabelas do banco (usando supabaseConfig)...")
  const url = supabaseConfig.url
  const anonKey = supabaseConfig.anonKey

  if (!url || url === PLACEHOLDER_URL || !anonKey || anonKey === PLACEHOLDER_KEY) {
    const errorMsg = `‚ùå Configura√ß√µes do Supabase inv√°lidas ou placeholders para validar tabelas. URL: '${url}'`
    console.error(errorMsg)
    if (process.env.NODE_ENV === "production" && (url === PLACEHOLDER_URL || anonKey === PLACEHOLDER_KEY)) {
      throw new Error(errorMsg + " Placeholders n√£o s√£o permitidos em produ√ß√£o aqui.")
    }
    if (!url || !anonKey) throw new Error(errorMsg + " URL ou Chave Anon n√£o definidas.")
    if (url === PLACEHOLDER_URL || anonKey === PLACEHOLDER_KEY) {
      console.warn("Tentando validar tabelas com placeholders.")
      // throw new Error(errorMsg + " N√£o √© poss√≠vel validar tabelas reais com placeholders.");
    }
  }
  // ... (resto da l√≥gica de fetch para tabelas)
  const tablesToCheck = [TABLES.USER_PROFILES, TABLES.AGENTS, TABLES.SYSTEM_SETTINGS]
  const results = []

  for (const table of tablesToCheck) {
    try {
      const response = await fetch(`${restApiUrls.base}/${table}?limit=1`, {
        headers: getDefaultHeaders(),
      })

      if (response.ok) {
        console.log(`‚úÖ Tabela ${table}: OK`)
        results.push({ table, status: "ok" })
      } else {
        console.log(`‚ùå Tabela ${table}: Erro ${response.status}`)
        results.push({ table, status: "error", error: response.status })
      }
    } catch (error) {
      console.log(`‚ùå Tabela ${table}: Erro de conex√£o`, error.message)
      results.push({ table, status: "error", error: error.message })
    }
  }

  const successCount = results.filter((r) => r.status === "ok").length
  console.log(`üìä Tabelas validadas: ${successCount}/${tablesToCheck.length}`)

  if (successCount === 0 && tablesToCheck.length > 0 && url !== PLACEHOLDER_URL && anonKey !== PLACEHOLDER_KEY) {
    // S√≥ lan√ßa erro se n√£o estivermos usando placeholders e nenhuma tabela for encontrada.
    throw new Error("Nenhuma tabela principal foi encontrada ou est√° acess√≠vel.")
  }
  return results
}

export type TableName = keyof typeof TABLES
export type TableValue = (typeof TABLES)[TableName]
