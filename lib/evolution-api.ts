import { supabase } from "./supabase" // Assuming this is your custom Supabase wrapper
import type { EvolutionBotIndividualConfig, EvolutionInstanceSettings, CreateBotResponse } from "./evolution-api" // Assuming types are in the same file or correctly pathed

// Melhorar a fun√ß√£o getEvolutionConfig para valida√ß√£o mais robusta e logs detalhados
async function getEvolutionConfig() {
  console.log("üîç Buscando configura√ß√£o da Evolution API no banco de dados...")

  // Corrected Supabase call
  const integrationsTable = await supabase.from("integrations")
  const { data, error: dbError } = await integrationsTable
    .select("config")
    .eq("type", "evolution_api")
    .eq("is_active", true)
    .single()

  if (dbError) {
    console.error("‚ùå Erro ao buscar configura√ß√£o da Evolution API no Supabase:", dbError)
    throw new Error(`Erro no banco de dados ao buscar config da Evolution API: ${dbError.message}`)
  }

  if (!data) {
    console.error("‚ùå Configura√ß√£o da Evolution API n√£o encontrada ou n√£o est√° ativa no banco de dados.")
    throw new Error(
      "Configura√ß√£o da Evolution API n√£o encontrada ou inativa. Verifique se est√° configurada no painel de administra√ß√£o.",
    )
  }

  const config = data.config as { apiUrl?: string; apiKey?: string }

  if (!config || typeof config !== "object") {
    console.error("‚ùå Configura√ß√£o da Evolution API inv√°lida no banco de dados:", data.config)
    throw new Error("Configura√ß√£o da Evolution API est√° em formato inv√°lido.")
  }

  if (!config.apiUrl || config.apiUrl.trim() === "") {
    console.error("‚ùå URL da Evolution API n√£o configurada na base de dados:", config.apiUrl)
    throw new Error("URL da Evolution API n√£o est√° configurada. Configure no painel de administra√ß√£o.")
  }

  // apiKey is optional for some Evolution API setups, so a warning is appropriate
  if (!config.apiKey || config.apiKey.trim() === "") {
    console.warn("‚ö†Ô∏è Chave da API da Evolution API (apiKey) n√£o configurada. Algumas requisi√ß√µes podem falhar.")
  }

  console.log("‚úÖ Configura√ß√£o da Evolution API encontrada.")
  console.log("üîë API Key:", config.apiKey ? "Configurada" : "N√£o configurada (opcional para alguns endpoints)")

  return config
}

// Melhorar a fun√ß√£o createEvolutionBot com logs detalhados e tratamento de erros robusto
export async function createEvolutionBot(
  instanceName: string,
  botData: EvolutionBotIndividualConfig,
): Promise<CreateBotResponse> {
  try {
    console.log(`ü§ñ Iniciando cria√ß√£o de bot na Evolution API para inst√¢ncia: ${instanceName}...`)
    console.log("üìã Dados do bot para CRIAR:", JSON.stringify(botData, null, 2))

    const config = await getEvolutionConfig() // This will now work correctly
    const url = `${config.apiUrl}/evolutionBot/create/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o POST para o endpoint da Evolution API")

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        apikey: config.apiKey || "", // Send empty string if not configured
      },
      body: JSON.stringify(botData),
    })

    const responseText = await response.text() // Always get text first for better error details
    if (process.env.NODE_ENV === "development") {
      console.log(`üìÑ Resposta da Evolution API (Cria√ß√£o - Status ${response.status}):`, responseText)
    } else {
      console.log(`üìÑ Resposta da Evolution API (Cria√ß√£o - Status ${response.status})`)
    }

    if (!response.ok) {
      const errorDetail = process.env.NODE_ENV === "development" ? responseText : "Detalhes omitidos no cliente."
      console.error(`‚ùå Erro da Evolution API (Cria√ß√£o - Status ${response.status}): ${errorDetail}`)
      return {
        success: false,
        error: `Erro ${response.status} da Evolution API: ${responseText || "Resposta vazia"}`,
      }
    }

    try {
      const result = JSON.parse(responseText)
      if (!result.id) {
        console.error("‚ùå Resposta da Evolution API n√£o cont√©m ID do bot (Cria√ß√£o):", result)
        return { success: false, error: "Resposta da API (cria√ß√£o) n√£o cont√©m ID do bot esperado." }
      }
      console.log("‚úÖ Bot criado com sucesso na Evolution API. ID:", result.id)
      return { success: true, botId: result.id }
    } catch (parseError) {
      console.error("‚ùå Erro ao parsear JSON da resposta da Evolution API (Cria√ß√£o):", parseError)
      console.error("üìÑ Texto da resposta que falhou no parse:", responseText)
      return { success: false, error: "Resposta da API (cria√ß√£o) n√£o √© um JSON v√°lido." }
    }
  } catch (error: any) {
    console.error("‚ùå Erro detalhado ao criar bot na Evolution API:", error)
    // Check for specific fetch error (e.g., server not reachable)
    if (error.name === "TypeError" && error.message.includes("fetch")) {
      return {
        success: false,
        error:
          "N√£o foi poss√≠vel conectar com a Evolution API. Verifique se o servidor est√° funcionando e a URL est√° correta.",
      }
    }
    return { success: false, error: error.message || "Erro desconhecido ao tentar criar bot na Evolution API" }
  }
}

export async function updateEvolutionBot(
  instanceName: string,
  botId: string,
  botData: EvolutionBotIndividualConfig,
): Promise<boolean> {
  try {
    console.log(`üîÑ Atualizando bot ${botId} na Evolution API para inst√¢ncia: ${instanceName}...`)
    console.log("üìã Dados do bot para ATUALIZAR:", JSON.stringify(botData, null, 2))

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/update/${botId}/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o PUT para o endpoint da Evolution API")

    const response = await fetch(url, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        apikey: config.apiKey || "",
      },
      body: JSON.stringify(botData),
    })

    const responseText = await response.text()
    if (process.env.NODE_ENV === "development") {
      console.log(`üìÑ Resposta da Evolution API (Atualiza√ß√£o - Status ${response.status}):`, responseText)
    } else {
      console.log(`üìÑ Resposta da Evolution API (Atualiza√ß√£o - Status ${response.status})`)
    }

    if (!response.ok) {
      const errorDetail = process.env.NODE_ENV === "development" ? responseText : "Detalhes omitidos no cliente."
      console.error(`‚ùå Erro ao atualizar bot na Evolution API (Status ${response.status}): ${errorDetail}`)
      return false
    }

    console.log(`‚úÖ Bot ${botId} atualizado com sucesso na Evolution API.`)
    return true
  } catch (error: any) {
    console.error(`‚ùå Erro detalhado ao atualizar bot ${botId} na Evolution API:`, error)
    return false
  }
}

export async function setEvolutionInstanceSettings(
  instanceName: string,
  settingsData: EvolutionInstanceSettings,
): Promise<boolean> {
  try {
    console.log(`‚öôÔ∏è Configurando defini√ß√µes da inst√¢ncia ${instanceName} na Evolution API...`)
    console.log("üìã Dados das defini√ß√µes:", JSON.stringify(settingsData, null, 2))

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/settings/${instanceName}` // Endpoint √© POST para settings

    console.log("üåê Fazendo requisi√ß√£o POST para o endpoint da Evolution API")

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        apikey: config.apiKey || "",
      },
      body: JSON.stringify(settingsData),
    })

    const responseText = await response.text()
    if (process.env.NODE_ENV === "development") {
      console.log(`üìÑ Resposta da Evolution API (Defini√ß√µes da Inst√¢ncia - Status ${response.status}):`, responseText)
    } else {
      console.log(`üìÑ Resposta da Evolution API (Defini√ß√µes da Inst√¢ncia - Status ${response.status})`)
    }

    if (!response.ok) {
      const errorDetail = process.env.NODE_ENV === "development" ? responseText : "Detalhes omitidos no cliente."
      console.error(
        `‚ùå Erro ao configurar defini√ß√µes da inst√¢ncia na Evolution API (Status ${response.status}): ${errorDetail}`,
      )
      return false
    }

    console.log(`‚úÖ Defini√ß√µes da inst√¢ncia ${instanceName} configuradas com sucesso na Evolution API.`)
    return true
  } catch (error: any) {
    console.error(`‚ùå Erro detalhado ao configurar defini√ß√µes da inst√¢ncia ${instanceName} na Evolution API:`, error)
    return false
  }
}

export async function deleteEvolutionBot(instanceName: string, botId: string): Promise<boolean> {
  try {
    console.log(`üóëÔ∏è Deletando bot ${botId} na Evolution API para inst√¢ncia: ${instanceName}...`)

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/delete/${botId}/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o DELETE para o endpoint da Evolution API")

    const response = await fetch(url, {
      method: "DELETE",
      headers: {
        apikey: config.apiKey || "",
      },
    })

    const responseText = await response.text() // Get text even for delete for potential error messages
    if (process.env.NODE_ENV === "development") {
      console.log(`üìÑ Resposta da Evolution API (Dele√ß√£o - Status ${response.status}):`, responseText)
    } else {
      console.log(`üìÑ Resposta da Evolution API (Dele√ß√£o - Status ${response.status})`)
    }

    if (!response.ok) {
      const errorDetail = process.env.NODE_ENV === "development" ? responseText : "Detalhes omitidos no cliente."
      console.error(`‚ùå Erro ao deletar bot na Evolution API (Status ${response.status}): ${errorDetail}`)
      return false
    }

    console.log(`‚úÖ Bot ${botId} deletado com sucesso na Evolution API.`)
    return true
  } catch (error: any) {
    console.error(`‚ùå Erro detalhado ao deletar bot ${botId} na Evolution API:`, error)
    return false
  }
}

export async function fetchEvolutionBot(instanceName: string, botId: string): Promise<any> {
  try {
    console.log(`üì• Buscando bot ${botId} na Evolution API para inst√¢ncia: ${instanceName}...`)

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/fetch/${botId}/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o GET para o endpoint da Evolution API")

    const response = await fetch(url, {
      method: "GET",
      headers: {
        apikey: config.apiKey || "",
      },
    })

    const responseText = await response.text()
    if (process.env.NODE_ENV === "development") {
      console.log(`üìÑ Resposta da Evolution API (Busca de Bot - Status ${response.status}):`, responseText)
    } else {
      console.log(`üìÑ Resposta da Evolution API (Busca de Bot - Status ${response.status})`)
    }

    if (!response.ok) {
      const errorDetail = process.env.NODE_ENV === "development" ? responseText : "Detalhes omitidos no cliente."
      console.error(`‚ùå Erro ao buscar bot na Evolution API (Status ${response.status}): ${errorDetail}`)
      return null
    }

    try {
      const result = JSON.parse(responseText)
      console.log(`‚úÖ Bot ${botId} encontrado na Evolution API:`, result)
      return result
    } catch (parseError) {
      console.error("‚ùå Erro ao parsear JSON da resposta da Evolution API (Busca de Bot):", parseError)
      console.error("üìÑ Texto da resposta que falhou no parse:", responseText)
      return null
    }
  } catch (error: any) {
    console.error(`‚ùå Erro detalhado ao buscar bot ${botId} na Evolution API:`, error)
    return null
  }
}

export async function fetchEvolutionBotSettings(instanceName: string): Promise<any> {
  try {
    console.log(`‚öôÔ∏è Buscando configura√ß√µes da inst√¢ncia ${instanceName} na Evolution API...`)

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/fetchSettings/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o GET para o endpoint da Evolution API")

    const response = await fetch(url, {
      method: "GET",
      headers: {
        apikey: config.apiKey || "",
      },
    })

    const responseText = await response.text()
    if (process.env.NODE_ENV === "development") {
      console.log(`üìÑ Resposta da Evolution API (Busca de Configura√ß√µes - Status ${response.status}):`, responseText)
    } else {
      console.log(`üìÑ Resposta da Evolution API (Busca de Configura√ß√µes - Status ${response.status})`)
    }

    if (!response.ok) {
      const errorDetail = process.env.NODE_ENV === "development" ? responseText : "Detalhes omitidos no cliente."
      console.error(
        `‚ùå Erro ao buscar configura√ß√µes da inst√¢ncia na Evolution API (Status ${response.status}): ${errorDetail}`,
      )
      return null
    }

    try {
      const result = JSON.parse(responseText)
      console.log(`‚úÖ Configura√ß√µes da inst√¢ncia ${instanceName} encontradas na Evolution API:`, result)
      return result
    } catch (parseError) {
      console.error("‚ùå Erro ao parsear JSON da resposta da Evolution API (Busca de Configura√ß√µes):", parseError)
      console.error("üìÑ Texto da resposta que falhou no parse:", responseText)
      return null
    }
  } catch (error: any) {
    console.error(`‚ùå Erro detalhado ao buscar configura√ß√µes da inst√¢ncia ${instanceName} na Evolution API:`, error)
    return null
  }
}
